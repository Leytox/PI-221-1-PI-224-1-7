datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

enum Role {
  ADMIN
  MANAGER
  USER
}

enum BookType {
  PAPER
  ELECTRONIC
  AUDIO
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  CANCELLED
}

model User {
  id        String    @id @default(cuid())
  firstName String
  lastName  String
  image     String?
  role      Role      @default(USER)
  email     String    @unique
  password  String
  accounts  Account[]
  sessions  Session[]
  orders    Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Genre {
  id    String @id @default(cuid())
  name  String @unique
  books Book[]
}

model Book {
  id          String    @id @default(cuid())
  title       String
  author      String
  description String
  image       String?
  isbn        String?
  pages       Int?
  language    String?
  publishedAt DateTime?
  genreId     String
  genre       Genre     @relation(fields: [genreId], references: [id], onDelete: Cascade)
  type        BookType
  price       Float
  orders      Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id     String      @id @default(cuid())
  book   Book        @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId String
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  status OrderStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
